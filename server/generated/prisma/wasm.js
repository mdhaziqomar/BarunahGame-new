
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  fullName: 'fullName',
  role: 'role',
  avatar: 'avatar',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  school: 'school',
  grade: 'grade',
  knowledgePoints: 'knowledgePoints',
  level: 'level',
  experience: 'experience',
  businessName: 'businessName',
  businessType: 'businessType',
  contactPhone: 'contactPhone'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  question: 'question',
  optionA: 'optionA',
  optionB: 'optionB',
  optionC: 'optionC',
  optionD: 'optionD',
  correctAnswer: 'correctAnswer',
  explanation: 'explanation',
  subject: 'subject',
  difficulty: 'difficulty',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  difficulty: 'difficulty',
  subject: 'subject',
  currentQuestion: 'currentQuestion',
  totalQuestions: 'totalQuestions',
  score: 'score',
  knowledgePointsEarned: 'knowledgePointsEarned',
  timeStarted: 'timeStarted',
  timeCompleted: 'timeCompleted',
  bossDefeated: 'bossDefeated',
  bossHp: 'bossHp',
  bossMaxHp: 'bossMaxHp',
  timerBonus: 'timerBonus',
  shieldActive: 'shieldActive',
  kpMultiplier: 'kpMultiplier'
};

exports.Prisma.GameAnswerScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId',
  questionId: 'questionId',
  userId: 'userId',
  selectedAnswer: 'selectedAnswer',
  isCorrect: 'isCorrect',
  timeSpent: 'timeSpent',
  knowledgePointsEarned: 'knowledgePointsEarned',
  answeredAt: 'answeredAt'
};

exports.Prisma.RewardScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  knowledgePointsCost: 'knowledgePointsCost',
  imageUrl: 'imageUrl',
  category: 'category',
  isActive: 'isActive',
  stockQuantity: 'stockQuantity',
  vendorId: 'vendorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRewardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  rewardId: 'rewardId',
  status: 'status',
  qrCode: 'qrCode',
  redeemedAt: 'redeemedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.PetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  rarity: 'rarity',
  knowledgePointsCost: 'knowledgePointsCost',
  abilities: 'abilities',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserPetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  petId: 'petId',
  nickname: 'nickname',
  level: 'level',
  experience: 'experience',
  isActive: 'isActive',
  acquiredAt: 'acquiredAt'
};

exports.Prisma.BossScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  baseHp: 'baseHp',
  hpPerLevel: 'hpPerLevel',
  difficulty: 'difficulty',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.BossQuestionScalarFieldEnum = {
  id: 'id',
  bossId: 'bossId',
  questionId: 'questionId'
};

exports.Prisma.UserStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalGamesPlayed: 'totalGamesPlayed',
  totalBossesDefeated: 'totalBossesDefeated',
  totalCorrectAnswers: 'totalCorrectAnswers',
  totalQuestions: 'totalQuestions',
  longestStreak: 'longestStreak',
  currentStreak: 'currentStreak',
  averageScore: 'averageScore',
  totalTimeSpent: 'totalTimeSpent',
  favoriteSubject: 'favoriteSubject',
  lastPlayedAt: 'lastPlayedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaderboardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  username: 'username',
  knowledgePoints: 'knowledgePoints',
  level: 'level',
  totalGamesPlayed: 'totalGamesPlayed',
  bossesDefeated: 'bossesDefeated',
  rank: 'rank',
  period: 'period',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  STUDENT: 'STUDENT',
  VENDOR: 'VENDOR',
  ADMIN: 'ADMIN'
};

exports.Subject = exports.$Enums.Subject = {
  MELAYU_CULTURE: 'MELAYU_CULTURE',
  ISLAMIC_VALUES: 'ISLAMIC_VALUES',
  BERAJA_SYSTEM: 'BERAJA_SYSTEM',
  BRUNEI_HISTORY: 'BRUNEI_HISTORY',
  GENERAL_MIB: 'GENERAL_MIB'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD'
};

exports.GameStatus = exports.$Enums.GameStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  ABANDONED: 'ABANDONED'
};

exports.RewardStatus = exports.$Enums.RewardStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REDEEMED: 'REDEEMED',
  EXPIRED: 'EXPIRED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Question: 'Question',
  Game: 'Game',
  GameAnswer: 'GameAnswer',
  Reward: 'Reward',
  UserReward: 'UserReward',
  Pet: 'Pet',
  UserPet: 'UserPet',
  Boss: 'Boss',
  BossQuestion: 'BossQuestion',
  UserStats: 'UserStats',
  Leaderboard: 'Leaderboard',
  SystemSettings: 'SystemSettings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
